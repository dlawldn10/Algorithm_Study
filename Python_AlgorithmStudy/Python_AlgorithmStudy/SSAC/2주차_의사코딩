

#0809_2주차 의사코딩

이번주 메인 과제는 -> 구글 설문조사. 
 자료구조 문제들 풀이법 및 pseudo code(의사코드)제출.
 문제 해결 능력을 좀 더 키우기 위해서.
- 실 구현은 할 필요 없음
- 어떤 자료구조를 사용해서 어떻게 풀면 되는지.
- ex) 리스트는 이러이러해서 시간 때문에 안될것 같다. 
      대신에 이러한 이유때문에 이러한 것을 써야할 것 같다. 


#1021 회전하는 큐
첫번째 원소와 마지막 원소가 연결되어있고 원소의 삭제가 가능해야 하므로
링크드 리스트 또는 덱(큐)을 사용 가능할 것이라 생각했고, 덱을 사용해보았다.

1. 첫번째 원소를 뽑아낸다 -> popleft : 맨 앞에 있는 경우
2. 왼쪽으로 한칸 이동시킨다 -> popleft, append(popleft) : 앞쪽과 가까이 있는 경우
3. 오른쪽으로 한칸 이동시킨다. -> popright, insert(0, popright) : 뒤쪽과 가까운 경우

N 을 반으로 나눴을때 인덱스가 왼쪽과 가까운 경우는 2. 사용, 
오른쪽과 가까운 경우는3. 사용.
맨 앞에 있는 경우 1. 을 사용.
2, 3 번을 사용하는 경우만 물어봤으므로 cnt값은 2, 3 번을 실시할 경우만 올라간다.


N, M = 큐의 크기, 뽑아내려고 하는 수의 개수 input()
data = [1부터 N까지 들어있는, 크기가 N인 deque]
index = [뽑아내려고 하는 수의 인덱스 리스트 list(map(input()))]

cnt = 인덱스 카운터 = 0
for num in index:
    if data[0] == num:
        data.popleft()
    if data[num] <= (N//2):
        data.append(data.popleft()) 또는 rotate(-1)
        cnt++
    else:
        data.insert(0, data.popright()) 또는 rotate(1)
        cnt++



#1158 조세퍼스 문제 
원을 이루며 앉아 있으므로 마찬가지로 덱을 사용해보았다.
popleft, append를 반복하다가 k번째가 되면 append를 하지 않는다. 
그럼 K번째 수만 팝이 되면서 수열이 만들어진다.

N, K = 원에 둘러 앉아 있는 인원수, 제거할 사람의 순번(?)
people = [1번 부터 N번까지의 사람들이 들어있는 deque]

cnt = K가 될때까지 세는 변수 = 1
while(people에 원소가 존재할때):
    if cnt == k:
        people.popleft()
        cnt = 0
    else:
        people.append(people.popleft())
        cnt++


    
#2346 풍선 터뜨리기
원을 이루며 앉아 있으므로 마찬가지로 덱을 사용해보았다.
풍선 안에 적혀있는 수가 양수이면 그 수 만큼 popleft, append를 하고 마지막은 popleft.
음수이면 절댓값 수 만큼 popright, insert(0,popright) 하고 마지막은 popleft.

N = 풍선의 개수 input()
p = deque() -> p에 (풍선의 번호, 종이에 적혀있는 수) 를 각각 집어넣는다.
idx = list() -> 터진 풍선의 번호를 저장할 리스트

while(p가 비어있지 않은동안):
    k = p.popleft()
    k[0] = 터진 풍선의 번호
    k[1] = 터진 풍선에 적힌 종이의 숫자값

    idx.append(k[0])

    for i in range(0, abs(k[1])):
        if k[1]가 양수일때:
            p.append(p.popleft())
        else k[1]가 음수일때:
            p.insert(0,popright())



#1406 에디터
커서가 문장의 맨 뒤에서부터 시작되고, 원소의 삭제와 삽입이 필요한 점을 보아 배열로 풀 시엔
시간초과가 있을 것이라 생각하여 pop과 appned가 있는 스택으로 접근하였다.

스택을 두개 사용한다. 원본 문자열용, 왼쪽 이동용.
P로 삽입할때는 위의 원소를 pop하고 필요 원소를 넣는다.
왼쪽으로 이동할때는 맨 위에 원소부터 차례대로 pop해서 왼쪽 이동용 스택에 append 넣는다.

stk1 = [편집기에 입력된 문자열.strip()]
stk2 = [] 왼쪽 이동용

M = 명령어의 개수 int(input())

for i in range(0, M):
    if 명령어 input() == "L":
        stk2.push(stk1.pop())
    elif 명령어 input() == "D":
        stk1.push(stk2.pop())
    elif 명령어 input() == "B":
        stk1.pop()
    else:
        stk1.push(명령어 input().strip()[2])



#1935 후위표기식2 *
입력이 -20억과 20억 사이의 계산결과가 나오도록 주어져서 배열을 이용할 경우 
원소의 값을 삭제/삽입할 때 시간초과가 있을 것 같아 스택으로 접근해야한다고 생각한다.
ABC*+DE/- -> A + B * C - D / E
숫자를 만나면 스택에 넣고
연산자를 만나면 숫자 두개 빼서 연산하기
결과를 다시 스택에 넣기
마지막에 스택에 남은 숫자가 정답.
N = int(input())
s = input()
arr = [int(input()) for _ in range(N)]
stk = []
for ch in s:
    if ch.isalpha(): #피연산자이면
        stk.append(arr[ord(ch) - ord('A')])
        continue

    b = stk.pop()
    a = stk.pop()
    if ch == '+':
        stk.append(a+b)
    elif ch == '-':
        stk.append(a-b)
    elif ch == '*':
        stk.append(a*b)
    elif ch == '/': #나눗셈의 경우 연산 순서 중요하므로 주의할 것!
        stk.append(a/b)

print(f"{stk[0]:.2f}")


***
#1874 스택 수열 *
인터넷 풀이 참고함*
스택을 사용하는 문제로, push와 pop을 적절히 사용하여 주어진 수열과 같도록 만들어야한다.
1. 첫번째 줄에서 받은 입력값 n을 기준으로, n번 반복하는 for문을 돌리면서 x로 입력값을 받는다.
2. count, stack, result, no_message를 초기화한다.
3. count가 x보다 작을 때까지 반복:
    count는 하나씩 증가시키고
    stack에는 count값을 축적시키고
    result에는 +를 추가
4. 만약 stack의 마지막 값과 x가 같다면
    stack의 마지막 값을 꺼내고
    result에는 -추가
5. 만약 stack의 마지막 값과 x가 같아지지 않는 경우
    no_message에 False로 저장
    exit(0)으로 다음 반복으로 넘어가도록 함


    
#1764 듣보잡 *
인터넷 풀이 참고함*
듣도 못한 사람과 보도 못한 사람의 교집합을 찾는 문제이므로
두 리스트간 중복값인 intersection 부분을 찾는 것. 
& 연산자를 사용해서 중복되는 값만 뽑아낼 수 있다.
그리고 사전순으로 출력해야하므로 

N, M = 각각 듣도 못한 사람수, 보도못한 사람 수
N_list = [sys.stdin.readline().strip() for i in range(N)]
M_list = [sys.stdin.readline().strip() for i in range(M)]

duplicate = list(set(N_list) & set(M_list))

for name in sorted(duplicate):
    print(name)




#10799 쇠막대기
인터넷 풀이 참고함*
스택을 이용해서 풀 수 있다.
1. (이 나오면 스택에 넣는다.
2. ()이 나오면 현재 스택에 있는 ( 수만큼 정답에 더해준다. 
3. )이 나오면 스택의 (를 pop하고 정답에 1을 더해준다.

bar_razor = list(input())
answer = 0
stack = []

for i in range(len(bar_razor)):
    if bar_razor[i] == '(': #스택 쌓기
        stack.append('(')
        
    else:
        if bar_razor[i-1] == '(': #()라면 (를 pop하고 현재 스택에 들어있는 ( 수만큼 값을 더해준다.
            stack.pop()
            answer += len(stack)
            
        else:
            stack.pop() 
            answer += 1 #끄트머리 막대기 부분을 더해준다

print(answer)



#17298 오큰수
수열의 삽입/삭제가 없고 뒤에서 부터 차례대로 검사하면 되므로 
배열 또는 스택을 사용하면 될것 같다.

오른쪽 끝에서부터 거꾸로 i까지 검사하면서 오는데 i보다 큰수이면 갱신한다.
그런 수가 없으면 -1이다.

N = 수열의 크기
A = list(map(input().split())) 수열.
L = list() 오큰수들을 담을 리스트
okn = 0
exist = True

for i in range(0, N):
    for j in range(i, N):
        if A[i] < A[j]:
            okn = A[j]
           
        
    if okn == 0: 오큰수가 없다는 뜻.
        L.append(-1)
    else:
        L.append(okn)
        okn = 0




#2304 창고 다각형 
정렬한 후 가장 높은 값을 기준으로 왼쪽과 오른쪽으로 나눠서 
가장 왼쪽부터 큰 값이면 갱신하는 식으로 해서 높이들을 구한다.

다각형의 위치와 높이값이 모두 필요하므로 딕셔너리를 사용해보았다.

N = 기둥의 개수를 나타내는 정수
Col = [기둥들의 (L, H) 딕셔너리 리스트.]
sum = list() 구해진 기둥들의 높이를 저장할 리스트

Col.sort()

a = 0 높이 비교를 위한 변수
for i in range(가장 높은 높이의 이전까지):
    if Col[i][1] >= a:
        a = Col[i][1]
        sum.add(a)

a=0
for i in range(끝에서 부터 가장 높은 높이의 원소까지):
    if Col[i][1] >= a:
        a = Col[i][1]
        sum.add(a)

print(sum(sum) * N)


#2841 외계인의 기타 연주

원소의 삽입/삭제가 필요하고, 높은 음을 잡기 위해 이전에 짚었던 손을 떼지 않아도 된다는 점에서 스택을 사용하는 것이 좋을것이라 생각했다. 

줄이 바뀌면 짚고있던 모든 손을 뗀다. 
: 스택을 클리어하고 새로운 요소 append

같은 줄이라면, 음이 높아지면 하나씩 짚고, 낮으면 짚었던 것 만큼 떼고 필요한 음을 짚는다.
: 음이 높아지면 짚는 음을 append, 낮아지면 그 값보다 작아질때까지 pop한 후 필요한 요소를 append한다.

N, P = 음의 수, 프렛의 수
stk = []
count = 움직인 카운트 = 1
string, prt = map(기타줄 번호, 프렛 번호 input())
stk.append(prt)

for i in range(N):
    s, p = map(input.split)
    if string == s: 
        if prt < p:
            prt = p
            stk.append(prt)
            count++
        elif prt > p:
            prt = P
            while(top이 prt보다 큰 동안):
                stk.pop()
                count++
            stk.append(prt)
            count++
    else:
        기타줄 다른 경우
        string = s 기타줄을 바꿔주고
        stk.clear 스택을 비우고
        count++
        prt = p
        stk.append(prt)
        count++

print(count)

#3986 좋은 단어 *
괄호 문제와 비슷하게 접근하면 좋을 것이라 생각했고, 이 문제의 경우
맨위에 pop한 문자와 동일한 문자가 나올때까지 pop하는 방법으로 접근해보았다.
따라서 마지막에 스택에 남는 문자가 있으면 좋은 단어가 아님을 의미한다.

T = 테스트케이스 개수 input()
count = 좋은 단어 개수 = 0

for i in range(T):
    stk = [input()]
    pre = stk.pop
    for i in (1, len(stk)):
        tmp = stk.pop()
        if pre == tmp:
            pre = stk.pop()  pre 갱신
        
    if !stk: 스택이 비어있지 않으면 좋은 단어임.
        count++

    print(count)



#1966 프린터 큐 *
인터넷 풀이 참고함*
몇 번째 인쇄되었는지 궁금한 문서의 위치를 새로운 배열에 저장하고 
해당 위치는 1로 표기.
파이썬의 max 메소드를 이용하여 중요도 리스트의 최댓값을 구하여 
중요도 리스트의 첫번째 값과 같다면 출력.
여기서 위치 리스트와의 비교를 통해 사용자가 궁금한 값인지 확인. 

test_cases = int(input())

for _ in range(test_cases):
    n,m = list(map(int, input().split( )))
    imp = list(map(int, input().split( )))
    idx = list(range(len(imp)))
    idx[m] = 'target'

    # 순서
    order = 0
    
    while True:
        # 첫번째 if: imp의 첫번째 값 = 최댓값?
        if imp[0]==max(imp):
            order += 1
                        
            # 두번째 if: idx의 첫 번째 값 = "target"?
            if idx[0]=='target':
                print(order)
                break
            else:
                imp.pop(0)
                idx.pop(0)

        else:
            imp.append(imp.pop(0))
            idx.append(idx.pop(0)) 



#2075 N번째 큰 수 *
최대값들을 뽑아내야하기 때문에 우선순위 최대힙을 사용하는 것이라 생각했다.

주어지는 수들을 모두 최대힙에 넣고 N번 pop을 하면 N번째로 큰 수를 구할 수 있다.
수들을 힙에 넣을때는 부호를 음수로 해서 넣으면 최대힙이 된다.
import heapq

N = 몇번째 큰수를 알고싶은지 input()
heap = []

주어지는 수들을 힙에 음수로 집어넣기
for _ in range(N):
    heapq.heappush(heap, map(int, sys.stdin.readline().split())*(-1))
    
한번 덜 뽑음.
for _ in range(N-1)):
        heapq.heappop(heap)

print(heapq.heappop(heap))
        



#2696 중앙값 구하기
원소들을 정렬할 필요가 있어 원소들의 삽입/삭제가 용이한 큐를 사용하였다.
맨 앞부터 popleft를 하고 다른 리스트에 append를 하는데,
그 리스트를 처음부터 검사해서 알맞은 위치에 이를 삽입한다. 
그 후 리스트에서 중앙에 있는 요소를 하나씩 출력한다.
중앙값의 갯수는 수열의 총 사이즈 나누기 3의 몫이다.

S = 입력받은 수열 큐
newlist = append할 리스트

newlist.append(S.popleft())

count = 0
for k in range(1, 수열의 크기):
    tmp = S.popleft()
    for i in range(len(newlist)):
        if tmp > newlist[i]
            newlist.insert(i, tmp)
    count++
    if count == 3:
        newlist = sorted(newlist)
        print(newlist[반올림한(len(newlist)/2)])
        count = 0




#1715 카드 정렬하기
작은 수 부터 pop할 수 있는 우선순위 최소힙을 이용해보았다.
우선순위 큐에 카드 묶음수를 넣는다. 작은 수부터 두개 pop해서 더한다음 그 값을 sum에 더한다.
그 값을 다시 넣고, 작은 수 두개 pop해서 두개를 더한 다음 그 값을sum에 누적하여 더한다.
이를 반복한다.
N=1인 경우에는 과정이 필요 없다.

import heapq
import sys

N = int(input())
card_deck = []
for _ in range(N):
    heapq.heappush(card_deck, int(sys.stdin.readline()))


if len(card_deck) == 1: #1개일 경우 비교하지 않아도 된다
    print(0)
else:
    answer = 0
    while len(card_deck) > 1: #1개일 경우 비교하지 않아도 된다
        temp_1 = heapq.heappop(card_deck) #제일 작은 덱
        temp_2 = heapq.heappop(card_deck) #두번째로 작은 덱
        answer += temp_1 + temp_2 #현재 비교 횟수를 더해줌
        heapq.heappush(card_deck, temp_1 + temp_2) #더한 덱을 다시 넣어줌
    
    print(answer)




#5397 키로거 
인터넷 풀이 참고함*
1. 배열을 두개로 분할하여 커서 기준 왼쪽에 위치한 데이터와 오른쪽에 위치한 데이터를 각각 담음

2. 커서의 이동에 따라 좌우 배열의 데이터를 이동함(데이터의 처음과 끝이 움직이기 때문에 O(1)의 시간복잡도 소요)

3. 입력데이터 처리가 종료되면 좌우 문자열을 하나로 합치고 출력

import sys
sys.stdin = open("./input.txt", "r")
T = int(input())
 
for tc in range(1, T+1):
 
    #입력 문자열 저장
    L = list(sys.stdin.readline().replace("\n",""))
 
    #커서를 기준으로 왼쪽 범위 데이터, 오른쪽 범위 데이터를 담을 스택 각각 선언
    leftStack = []
    rightStack = []
 
    #문자열 순회
    for x in L:
 
        #'-'일때 왼족스택을 pop해 데이터 삭제
        if x == '-':
            if len(leftStack) != 0:
                leftStack.pop()
 
        #'<'일때 왼쪽스택의 top 데이터를 오른쪽 스택에 push
        elif x == '<':
            if len(leftStack) != 0:
                rightStack.append(leftStack.pop())
 
        #'>'일때 오른쪽스택의 top 데이터를 왼쪽 스택에 push
        elif x == '>':
            if len(rightStack) != 0:
                leftStack.append(rightStack.pop())
 
        #일반문자일때 왼쪽스택에 push
        else:
            leftStack.append(x)
 
    #스택리스트를 문자열로 전환
    left = ''.join(leftStack)
    right = ''.join(rightStack[::-1])
 
    #왼쪽문자열과 오른쪽문자열을 병합
    answer = ''.join([left,right])
 
    #결과출력
    print(answer)


























